{"version":3,"sources":["webpack://migration-data-model/webpack/universalModuleDefinition","webpack://migration-data-model/webpack/bootstrap","webpack://migration-data-model/external \"sequelize\"","webpack://migration-data-model/./src/constants.js","webpack://migration-data-model/external \"path\"","webpack://migration-data-model/external \"dotenv\"","webpack://migration-data-model/external \"jsonwebtoken\"","webpack://migration-data-model/./src/services/utils.js","webpack://migration-data-model/./src/models/sequelize.js","webpack://migration-data-model/./src/models/User.js","webpack://migration-data-model/./src/models/Photo.js","webpack://migration-data-model/./src/models/Album.js","webpack://migration-data-model/./src/models/index.js","webpack://migration-data-model/external \"file-system\"","webpack://migration-data-model/external \"bcrypt\"","webpack://migration-data-model/./src/services/auth.js","webpack://migration-data-model/external \"express\"","webpack://migration-data-model/external \"apollo-server-express\"","webpack://migration-data-model/external \"merge-graphql-schemas\"","webpack://migration-data-model/external \"rimraf\"","webpack://migration-data-model/external \"sharp\"","webpack://migration-data-model/external \"http\"","webpack://migration-data-model/external \"body-parser\"","webpack://migration-data-model/external \"cors\"","webpack://migration-data-model/external \"compression\"","webpack://migration-data-model/external \"graphql-playground-middleware-express\"","webpack://migration-data-model/./src/models/seedUser.js","webpack://migration-data-model/external \"graphql-subscriptions\"","webpack://migration-data-model/external \"progress-stream\"","webpack://migration-data-model/external \"apollo-server\"","webpack://migration-data-model/./src/services/exif.js","webpack://migration-data-model/external \"exif\"","webpack://migration-data-model/external \"image-size\"","webpack://migration-data-model/./src/services/resize.js","webpack://migration-data-model/external \"mkdirp\"","webpack://migration-data-model/./src/services/permissions.js","webpack://migration-data-model/./src/formatErrors.js","webpack://migration-data-model/./src/resolvers/albums.js","webpack://migration-data-model/./src/pubsub.js","webpack://migration-data-model/./src/services/file.js","webpack://migration-data-model/./src/services/TaskQueue.js","webpack://migration-data-model/./src/services/batch.js","webpack://migration-data-model/./src/resolvers/photos.js","webpack://migration-data-model/./src/services/processFile.js","webpack://migration-data-model/./src/resolvers/users.js","webpack://migration-data-model/./src/resolvers/bin.js","webpack://migration-data-model/./src/resolvers/index.js","webpack://migration-data-model/./src/schema/index.js","webpack://migration-data-model/./src/schema/albums.js","webpack://migration-data-model/./src/schema/photos.js","webpack://migration-data-model/./src/schema/users.js","webpack://migration-data-model/./src/schema/bin.js","webpack://migration-data-model/./src/index.js"],"names":["root","factory","exports","module","require","define","amd","global","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__4__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__8__","__WEBPACK_EXTERNAL_MODULE__10__","__WEBPACK_EXTERNAL_MODULE__11__","__WEBPACK_EXTERNAL_MODULE__12__","__WEBPACK_EXTERNAL_MODULE__13__","__WEBPACK_EXTERNAL_MODULE__14__","__WEBPACK_EXTERNAL_MODULE__16__","__WEBPACK_EXTERNAL_MODULE__17__","__WEBPACK_EXTERNAL_MODULE__18__","__WEBPACK_EXTERNAL_MODULE__19__","__WEBPACK_EXTERNAL_MODULE__22__","__WEBPACK_EXTERNAL_MODULE__23__","__WEBPACK_EXTERNAL_MODULE__24__","__WEBPACK_EXTERNAL_MODULE__26__","__WEBPACK_EXTERNAL_MODULE__27__","__WEBPACK_EXTERNAL_MODULE__29__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","UPLOAD_FOLDER","PHOTOS_FOLDER","SALT_ROUNDS","ALBUM","PHOTO","SIZES","COVER_SIZE","THUMBNAIL_SIZE","BATCH_CONCURRENCY","DELIM","longestEdge","process","env","SERVER_URI","PORT","_constants__WEBPACK_IMPORTED_MODULE_1__","ROOT","path__WEBPACK_IMPORTED_MODULE_0___default","a","join","__dirname","external_dotenv_default","config","sequelize","external_sequelize_default","PGDATABASE","PGUSER","PGPASSWORD","host","PGHOST","port","PGPORT","dialect","pool","max","min","acquire","idle","logging","Op","User","id","type","INTEGER","primaryKey","autoIncrement","username","STRING","unique","allowNull","email","password","isAdmin","BOOLEAN","defaultValue","blocked","beforeCreate","u","external_bcrypt_default","hashSync","constants","models_User","models_Photo","urls","JSON","thumbnail","title","caption","width","height","exposure","shutter","aperture","iso","focalLength","dateTaken","DATE","isPublic","bin","indexes","fields","models_Album","slug","description","TEXT","cover","coverId","views","belongsTo","belongsToMany","through","onDelete","findByLogin","async","login","user","findOne","where","Photo","Album","refreshTokens","tryLogin","jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__","jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default","bcrypt__WEBPACK_IMPORTED_MODULE_1__","bcrypt__WEBPACK_IMPORTED_MODULE_1___default","createTokens","secret","secret2","rest","sign","expiresIn","token","refreshToken","models","SECRET","SECRET2","userId","decode","err","raw","refreshSecret","verify","console","log","newToken","newRefreshToken","success","errors","path","message","compare","refreshTokenSecret","_index__WEBPACK_IMPORTED_MODULE_0__","USERNAME","EMAIL","PASSWORD","path__WEBPACK_IMPORTED_MODULE_0__","exif__WEBPACK_IMPORTED_MODULE_1__","image_size__WEBPACK_IMPORTED_MODULE_2__","image_size__WEBPACK_IMPORTED_MODULE_2___default","filterExif","data","image","ImageDescription","exif","ExposureTime","ShutterSpeedValue","FNumber","ISO","FocalLength","date","dateParts","split","dateString","replace","Date","convertDate","CreateDate","filename","Promise","resolve","file","error","exifData","resizeImage","file_system__WEBPACK_IMPORTED_MODULE_1__","file_system__WEBPACK_IMPORTED_MODULE_1___default","dotenv__WEBPACK_IMPORTED_MODULE_2__","dotenv__WEBPACK_IMPORTED_MODULE_2___default","mkdirp__WEBPACK_IMPORTED_MODULE_3__","mkdirp__WEBPACK_IMPORTED_MODULE_3___default","sharp__WEBPACK_IMPORTED_MODULE_4__","sharp__WEBPACK_IMPORTED_MODULE_4___default","_constants__WEBPACK_IMPORTED_MODULE_5__","_utils__WEBPACK_IMPORTED_MODULE_6__","BASE_URL","getNewFileVersion","filePath","version","existsSync","fileExists","folder","dirname","newFilename","basename","ext","extname","body","resize","size","reject","actualWidth","resizeTo","imageIsTooSmall","inPath","outName","fileName","y","getFullYear","toString","getMonth","day","getDate","f","toLowerCase","safeName","makeFolderName","getDimensions","cb","writePath","outPath","toFormat","toFile","absolutePath","makeRelativePath","e","all","map","url","createResolver","resolver","baseResolver","childResolver","parent","args","context","info","permissions","Error","formatErrors","ValidationError","resolvers_albums","Query","allAlbums","filter","[object Object]","and","eq","findAll","include","model","as","order","then","result","dataValues","catch","getPublicAlbums","ne","getAlbum","albumId","Mutation","addAlbum","album","details","updateAlbum","update","addPhotosToAlbum","photoIds","findById","firstPhoto","addPhotos","removePhotosFromAlbum","removePhotos","addView","deleteAlbum","destroy","pubsub","src_pubsub","deleteFile","external_path_default","utils","external_rimraf_default","deletePhotoFiles","files","length","deNulledList","services_TaskQueue","concurrency","this","running","queue","task","push","next","shift","batch","records","params","sizes","con","limitConcurrency","batchResults","completed","increment","forEach","record","pushTask","argName","empty","photos_Op","PhotosResolver","Subscription","uploadStarted","subscribe","asyncIterator","uploadProgress","external_graphql_subscriptions_","payload","allPhotos","orderBy","$albums.id$","attributes","publicPhotos","isNaN","parseInt","uploadPhoto","totalUploadSize","stream","mimetype","progress","storePath","on","truncated","external_file_system_default","unlinkSync","pipe","external_file_system_","storeUpload","services_exif","processFile","photoData","cleanUpload","stringify","uploadPhotos","ctx","reduce","b","updatePhoto","photo","deletePhoto","resolvers_photos","users","auth","addUser","bin_Op","allBinItems","albums","photos","prev","cur","addToBin","ids","returning","in","includes","restore","emptyBin","dotenv__WEBPACK_IMPORTED_MODULE_0__","dotenv__WEBPACK_IMPORTED_MODULE_0___default","path__WEBPACK_IMPORTED_MODULE_1__","path__WEBPACK_IMPORTED_MODULE_1___default","http__WEBPACK_IMPORTED_MODULE_2__","http__WEBPACK_IMPORTED_MODULE_2___default","express__WEBPACK_IMPORTED_MODULE_3__","express__WEBPACK_IMPORTED_MODULE_3___default","body_parser__WEBPACK_IMPORTED_MODULE_4__","body_parser__WEBPACK_IMPORTED_MODULE_4___default","cors__WEBPACK_IMPORTED_MODULE_5__","cors__WEBPACK_IMPORTED_MODULE_5___default","compression__WEBPACK_IMPORTED_MODULE_6__","compression__WEBPACK_IMPORTED_MODULE_6___default","jsonwebtoken__WEBPACK_IMPORTED_MODULE_7__","jsonwebtoken__WEBPACK_IMPORTED_MODULE_7___default","apollo_server_express__WEBPACK_IMPORTED_MODULE_8__","graphql_playground_middleware_express__WEBPACK_IMPORTED_MODULE_9__","graphql_playground_middleware_express__WEBPACK_IMPORTED_MODULE_9___default","merge_graphql_schemas__WEBPACK_IMPORTED_MODULE_10__","_models__WEBPACK_IMPORTED_MODULE_11__","_models_seedUser__WEBPACK_IMPORTED_MODULE_12__","_services_auth__WEBPACK_IMPORTED_MODULE_13__","_package_json__WEBPACK_IMPORTED_MODULE_14__","_constants__WEBPACK_IMPORTED_MODULE_15__","_resolvers__WEBPACK_IMPORTED_MODULE_16__","_schema__WEBPACK_IMPORTED_MODULE_17__","REFRESH_SECRET","wsUri","SERVER_WS","typeDefs","resolvers","schema","server","req","connection","subscriptionsEndpoint","subscriptionsPath","app","use","res","headers","newTokens","set","json","limit","origin","endpoint","static","applyMiddleware","httpServer","createServer","installSubscriptionHandlers","exit","listen","sync"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"sequelize\"), require(\"path\"), require(\"dotenv\"), require(\"jsonwebtoken\"), require(\"file-system\"), require(\"bcrypt\"), require(\"express\"), require(\"apollo-server-express\"), require(\"merge-graphql-schemas\"), require(\"rimraf\"), require(\"sharp\"), require(\"body-parser\"), require(\"cors\"), require(\"compression\"), require(\"graphql-playground-middleware-express\"), require(\"graphql-subscriptions\"), require(\"progress-stream\"), require(\"apollo-server\"), require(\"exif\"), require(\"image-size\"), require(\"mkdirp\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"migration-data-model\", [\"sequelize\", \"path\", \"dotenv\", \"jsonwebtoken\", \"file-system\", \"bcrypt\", \"express\", \"apollo-server-express\", \"merge-graphql-schemas\", \"rimraf\", \"sharp\", \"body-parser\", \"cors\", \"compression\", \"graphql-playground-middleware-express\", \"graphql-subscriptions\", \"progress-stream\", \"apollo-server\", \"exif\", \"image-size\", \"mkdirp\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"migration-data-model\"] = factory(require(\"sequelize\"), require(\"path\"), require(\"dotenv\"), require(\"jsonwebtoken\"), require(\"file-system\"), require(\"bcrypt\"), require(\"express\"), require(\"apollo-server-express\"), require(\"merge-graphql-schemas\"), require(\"rimraf\"), require(\"sharp\"), require(\"body-parser\"), require(\"cors\"), require(\"compression\"), require(\"graphql-playground-middleware-express\"), require(\"graphql-subscriptions\"), require(\"progress-stream\"), require(\"apollo-server\"), require(\"exif\"), require(\"image-size\"), require(\"mkdirp\"));\n\telse\n\t\troot[\"migration-data-model\"] = factory(root[\"sequelize\"], root[\"path\"], root[\"dotenv\"], root[\"jsonwebtoken\"], root[\"file-system\"], root[\"bcrypt\"], root[\"express\"], root[\"apollo-server-express\"], root[\"merge-graphql-schemas\"], root[\"rimraf\"], root[\"sharp\"], root[\"body-parser\"], root[\"cors\"], root[\"compression\"], root[\"graphql-playground-middleware-express\"], root[\"graphql-subscriptions\"], root[\"progress-stream\"], root[\"apollo-server\"], root[\"exif\"], root[\"image-size\"], root[\"mkdirp\"]);\n})(global, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__2__, __WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__4__, __WEBPACK_EXTERNAL_MODULE__7__, __WEBPACK_EXTERNAL_MODULE__8__, __WEBPACK_EXTERNAL_MODULE__10__, __WEBPACK_EXTERNAL_MODULE__11__, __WEBPACK_EXTERNAL_MODULE__12__, __WEBPACK_EXTERNAL_MODULE__13__, __WEBPACK_EXTERNAL_MODULE__14__, __WEBPACK_EXTERNAL_MODULE__16__, __WEBPACK_EXTERNAL_MODULE__17__, __WEBPACK_EXTERNAL_MODULE__18__, __WEBPACK_EXTERNAL_MODULE__19__, __WEBPACK_EXTERNAL_MODULE__22__, __WEBPACK_EXTERNAL_MODULE__23__, __WEBPACK_EXTERNAL_MODULE__24__, __WEBPACK_EXTERNAL_MODULE__26__, __WEBPACK_EXTERNAL_MODULE__27__, __WEBPACK_EXTERNAL_MODULE__29__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 32);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","export const UPLOAD_FOLDER = 'uploads';\nexport const PHOTOS_FOLDER = 'photos';\nexport const SALT_ROUNDS = 10;\nexport const ALBUM = 'album';\nexport const PHOTO = 'photo';\n\n// Responsive resizing\n// Number = width\n// Object = { width, height }\nexport const SIZES = [\n  'original',\n  2560,\n  1440,\n  960,\n  700,\n  360,\n  { longestEdge: 150 },\n];\nexport const COVER_SIZE = 5; // item in SIZES array\nexport const THUMBNAIL_SIZE = 6; // item in SIZES array\nexport const BATCH_CONCURRENCY = 5;\nexport const DELIM = '__';\n","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","\nimport path from 'path';\nimport { PHOTOS_FOLDER } from '../constants';\n\nconst env = process.env.NODE_ENV;\n\nexport const HTTP_URL = `${process.env.SERVER_URI}:${process.env.PORT}`;\n\nexport const PHOTO_URL = `${HTTP_URL}/${PHOTOS_FOLDER}`;\n\nexport const ROOT = (env && env === 'development')\n  ? path.join(__dirname, '../../')\n  : path.join(__dirname, '../');\n","import dotenv from 'dotenv';\nimport Sequelize from 'sequelize';\n\ndotenv.config();\n\nexport default new Sequelize(\n  process.env.PGDATABASE,\n  process.env.PGUSER,\n  process.env.PGPASSWORD,\n  {\n    host: process.env.PGHOST,\n    port: process.env.PGPORT,\n    dialect: 'postgres',\n    pool: {\n      max: 5,\n      min: 0,\n      acquire: 30000,\n      idle: 10000,\n    },\n    logging: false,\n  },\n);\n","import dotenv from 'dotenv';\nimport bcrypt from 'bcrypt';\nimport Sequelize from 'sequelize';\nimport sequelize from './sequelize';\nimport { SALT_ROUNDS } from '../constants';\n\n// export const compareHash = (password, hashed) => bcrypt.compareSync(password, hashed);\n\ndotenv.config();\n\nconst { Op } = Sequelize;\n\nconst User = sequelize.define('users', {\n  id: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n  },\n  username: {\n    type: Sequelize.STRING,\n    unique: true,\n    allowNull: false,\n  },\n  email: {\n    type: Sequelize.STRING,\n    unique: true,\n    allowNull: false,\n  },\n  password: {\n    type: Sequelize.STRING,\n    allowNull: false,\n  },\n  isAdmin: {\n    type: Sequelize.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n  },\n  blocked: Sequelize.BOOLEAN,\n});\n\n// Hash password before committing to db\nUser.beforeCreate((u) => {\n  u.password = bcrypt.hashSync(u.password, SALT_ROUNDS);\n});\n\nexport const findByLogin = async (login) => {\n  let user = await User.findOne({\n    where: { username: login },\n  });\n\n  if (!user) {\n    user = await User.findOne({\n      where: { email: login },\n    });\n  }\n\n  return user;\n};\n\nexport default User;\n","import Sequelize from 'sequelize';\nimport sequelize from './sequelize';\n\nconst Photo = sequelize.define('photos', {\n  id: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n  },\n  name: {\n    type: Sequelize.STRING,\n    allowNull: false,\n  },\n  urls: {\n    type: Sequelize.JSON,\n    allowNull: false,\n  },\n  thumbnail: {\n    type: Sequelize.STRING,\n    allowNull: false,\n  },\n  title: Sequelize.STRING,\n  caption: Sequelize.STRING,\n  width: {\n    type: Sequelize.INTEGER,\n    allowNull: false,\n  },\n  height: {\n    type: Sequelize.INTEGER,\n    allowNull: false,\n  },\n  exposure: Sequelize.INTEGER,\n  shutter: Sequelize.INTEGER,\n  aperture: Sequelize.INTEGER,\n  iso: Sequelize.INTEGER,\n  focalLength: Sequelize.INTEGER,\n  dateTaken: Sequelize.DATE,\n  isPublic: {\n    type: Sequelize.BOOLEAN,\n    allowNull: false,\n    defaultValue: true,\n  },\n  bin: {\n    type: Sequelize.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n  },\n},\n{\n  indexes: [\n    {\n      name: 'i_photo_name',\n      unique: true,\n      fields: ['name'],\n    },\n    {\n      name: 'i_photo_title',\n      unique: true,\n      fields: ['title'],\n    },\n  ],\n});\n\nexport default Photo;\n","import Sequelize from 'sequelize';\nimport sequelize from './sequelize';\n\nconst Album = sequelize.define('albums', {\n  id: {\n    type: Sequelize.INTEGER,\n    primaryKey: true,\n    autoIncrement: true,\n  },\n  name: {\n    type: Sequelize.STRING,\n    allowNull: false,\n  },\n  slug: Sequelize.STRING,\n  description: Sequelize.TEXT,\n  cover: Sequelize.STRING,\n  coverId: Sequelize.INTEGER,\n  isPublic: {\n    type: Sequelize.BOOLEAN,\n    allowNull: false,\n    defaultValue: true,\n  },\n  views: {\n    type: Sequelize.INTEGER,\n    allowNull: false,\n    defaultValue: 0,\n  },\n  bin: {\n    type: Sequelize.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n  },\n}, {\n  indexes: [\n    {\n      name: 'i_album_name',\n      unique: true,\n      fields: ['name'],\n    },\n  ],\n});\n\n\nexport default Album;\n","import sequelize from './sequelize';\nimport User, { findByLogin } from './User';\nimport Photo from './Photo';\nimport Album from './Album';\n\n// Associations\nPhoto.belongsTo(User);\nAlbum.belongsTo(User);\nPhoto.belongsToMany(Album, { through: 'album_photos' });\nAlbum.belongsToMany(Photo, { through: 'album_photos', onDelete: 'CASCADE' });\n/**\n * Provides the following accessor methods:\n * Album.getPhotos\n * Album.setPhotos\n * Album.addPhoto(s)\n * Album.removePhoto(s)  .. and likelwise for Photos.getAlbums, etc.\n */\n\nexport default {\n  User,\n  findByLogin,\n  Photo,\n  Album,\n  sequelize,\n};\n\n// TODO: add indexes for sort and search cols\n","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__8__;","import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcrypt';\n\nexport const createTokens = async (user, secret, secret2) => {\n  const {\n    id, username, isAdmin, ...rest\n  } = user;\n\n  const createToken = jwt.sign(\n    { user: { id, username, isAdmin } },\n    secret,\n    { expiresIn: '1d' },\n  );\n\n  const createRefreshToken = jwt.sign(\n    { user: { id } },\n    secret2,\n    { expiresIn: '1w' },\n  );\n\n  return [createToken, createRefreshToken];\n};\n\nexport const refreshTokens = async (token, refreshToken, models, SECRET, SECRET2) => {\n  let userId = 0;\n  try {\n    const { user: { id } } = jwt.decode(refreshToken);\n    userId = id;\n  } catch (err) {\n    return {};\n  }\n  if (!userId) { return {}; }\n\n  const user = await models.User.findOne({ where: { id: userId }, raw: true });\n  if (!user) { return {}; }\n\n  const refreshSecret = user.password + SECRET2;\n\n\n  try {\n    jwt.verify(refreshToken, refreshSecret);\n  } catch (err) {\n    console.log('Unable to verify refreshToken');\n    return {};\n  }\n\n  const [newToken, newRefreshToken] = await createTokens(user, SECRET, refreshSecret);\n  return {\n    token: newToken,\n    refreshToken: newRefreshToken,\n    user,\n  };\n};\n\nexport const tryLogin = async (username, password, models, SECRET, SECRET2) => {\n  const user = await models.findByLogin(username);\n  if (!user) {\n    return {\n      success: false,\n      errors: [{ path: 'login', message: 'Wrong login details' }],\n    };\n  }\n\n  const valid = await bcrypt.compare(password, user.password);\n  if (!valid) {\n    // bad password\n    return {\n      success: false,\n      errors: [{ path: 'login', message: 'Wrong login details' }],\n    };\n  }\n  const refreshTokenSecret = user.password + SECRET2;\n  const [token, refreshToken] = await createTokens(user, SECRET, refreshTokenSecret);\n\n  return {\n    success: true,\n    token,\n    refreshToken,\n  };\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__10__;","module.exports = __WEBPACK_EXTERNAL_MODULE__11__;","module.exports = __WEBPACK_EXTERNAL_MODULE__12__;","module.exports = __WEBPACK_EXTERNAL_MODULE__13__;","module.exports = __WEBPACK_EXTERNAL_MODULE__14__;","module.exports = require(\"http\");","module.exports = __WEBPACK_EXTERNAL_MODULE__16__;","module.exports = __WEBPACK_EXTERNAL_MODULE__17__;","module.exports = __WEBPACK_EXTERNAL_MODULE__18__;","module.exports = __WEBPACK_EXTERNAL_MODULE__19__;","import models from './index';\n\nconst { User } = models;\n\nexport default async () => {\n  // Create default user\n  const username = process.env.USERNAME || 'test';\n  const email = process.env.EMAIL || 'test@test.com';\n  const password = process.env.PASSWORD || 'password';\n\n  const found = await User.findOne({ where: { email } });\n\n  if (!found) {\n    await User.create({\n      username, email, password, isAdmin: true,\n    });\n  }\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","module.exports = __WEBPACK_EXTERNAL_MODULE__23__;","module.exports = __WEBPACK_EXTERNAL_MODULE__24__;","import path from 'path';\nimport { ExifImage } from 'exif';\nimport sizeOf from 'image-size';\n\n// Convert '2015:07:11 11:56:35' to date\nconst convertDate = (date) => {\n  if (!date) { return null; }\n  const dateParts = date.split(' ');\n  const dateString = [dateParts[0].replace(/:/gm, '-'), dateParts[1]].join('T');\n  return new Date(dateString);\n};\n\n// TODO: read title and caption\nconst filterExif = (data) => {\n  if (!data) { return {}; }\n  return {\n    title: null,\n    caption: data.image && data.image.ImageDescription,\n    exposure: data.exif && data.exif.ExposureTime,\n    shutter: data.exif && data.exif.ShutterSpeedValue,\n    aperture: data.exif && data.exif.FNumber,\n    iso: data.exif && data.exif.ISO,\n    focalLength: data.exif && data.exif.FocalLength,\n    dateTaken: data.exif && convertDate(data.exif.CreateDate),\n  };\n};\n\nexport default filename => new Promise((resolve) => {\n  const file = path.join(__dirname, '../../uploads', filename);\n  // eslint-disable-next-line no-new\n  new ExifImage({ image: file }, ((error, exifData) => {\n    resolve({ ...filterExif(exifData), ...sizeOf(file) });\n  }));\n});\n","module.exports = __WEBPACK_EXTERNAL_MODULE__26__;","module.exports = __WEBPACK_EXTERNAL_MODULE__27__;","import path from 'path';\nimport fs from 'file-system';\nimport dotenv from 'dotenv';\nimport mkdirp from 'mkdirp';\nimport sharp from 'sharp';\nimport {\n  UPLOAD_FOLDER, PHOTOS_FOLDER, SIZES, DELIM, THUMBNAIL_SIZE,\n} from '../constants';\nimport { ROOT } from './utils';\n\ndotenv.config();\n\nconst BASE_URL = path.join(ROOT, PHOTOS_FOLDER);\n\n// Write any missing folders in a file path\nconst writePath = (filePath, cb) => {\n  mkdirp(path.dirname(filePath), (err) => {\n    if (err) return cb(err);\n    return cb();\n  });\n};\n\nconst fileExists = filePath => fs.existsSync(filePath);\n\nconst getNewFileVersion = (filePath, version = 0) => {\n  if (!fileExists(filePath)) {\n    return filePath;\n  }\n  const folder = path.dirname(filePath);\n  const newFilename = path.basename(filePath);\n  const ext = path.extname(newFilename);\n  const body = newFilename.split('.')[0].split(`${DELIM}${version}`)[0];\n  return getNewFileVersion(path.join(folder, `${body}${DELIM}${version + 1}${ext}`), version + 1);\n};\n\nconst safeName = f => f.replace(/[^a-z0-9._-]/gi, '').toLowerCase();\n\nconst makeFolderName = (fileName) => {\n  const d = new Date();\n  const y = d.getFullYear().toString();\n  const m = (d.getMonth() + 1).toString();\n  const day = d.getDate().toString();\n  const filePath = path.join(BASE_URL, y, m, day, safeName(fileName || ''));\n  return getNewFileVersion(filePath);\n};\n\nconst makeRelativePath = absolutePath => `/${absolutePath.replace(ROOT, '')}`;\n\nconst getDimensions = (size) => {\n  if (!size || size === 'original') {\n    return '';\n  }\n  // Set filename with size and an 'h' for fixed-height crops and w for width\n  if (size.height) { return `-${size.height}h`; }\n  if (size.width) { return `-${size.width}w`; }\n  return `-${size}w`;\n};\n\nconst imageIsTooSmall = (actualWidth, resizeTo) => {\n  if (resizeTo === 'original') { return false; }\n  const resizeWidth = resizeTo.width ? resizeTo.width : resizeTo;\n  return (actualWidth < resizeWidth);\n};\n\n// Return a size object oriented to resize the longest edge\nconst longestEdge = ({ width, height }, resizeTo) =>\n  // const aspect = width / height;\n  ((width >= height)\n    ? { width: resizeTo, height: null }\n    : { width: null, height: resizeTo });\n\n// eslint-disable-next-line import/prefer-default-export\nexport const resize = (filename, exif) => size => new Promise((resolve, reject) => {\n  if (imageIsTooSmall(exif.width, size)) {\n    resolve(null); // Don't upsample!\n  } else {\n    if (size.longestEdge) {\n      size = longestEdge(exif, size.longestEdge); // Resize to correct orientation\n    }\n    const inPath = path.join(__dirname, `../../${UPLOAD_FOLDER}`, filename);\n    const ext = path.extname(filename);\n    const outName = makeFolderName(`${filename.split(ext)[0]}${getDimensions(size)}${ext}`);\n    try {\n      writePath(outName, async () => {\n        const outPath = path.join(outName);\n        if (typeof size === 'number') {\n          await sharp(inPath)\n            .resize(size)\n            .toFormat('jpeg')\n            .toFile(outPath);\n        } else {\n          await sharp(inPath)\n            .resize(size.width, size.height)\n            .toFormat('jpeg')\n            .toFile(outPath);\n        }\n        // Convert file paths to relative server paths\n        resolve(makeRelativePath(outPath));\n      });\n    } catch (e) {\n      console.log('resize error:', e.message);\n      reject(e);\n    }\n  }\n});\n\nexport const resizeImage = async (filename, exif) => {\n  try {\n    const name = path.basename(filename);\n    const urls = await Promise.all(SIZES.map(resize(filename, exif)));\n    return {\n      name, urls, thumbnail: urls[THUMBNAIL_SIZE], error: null,\n    };\n  } catch (err) {\n    return { url: null, error: err };\n  }\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__29__;","const createResolver = (resolver) => {\n  const baseResolver = resolver;\n  baseResolver.createResolver = (childResolver) => {\n    const newResolver = async (parent, args, context, info) => {\n      await resolver(parent, args, context, info);\n      return childResolver(parent, args, context, info);\n    };\n    return createResolver(newResolver);\n  };\n  return baseResolver;\n};\n\n// requiresAuth\nexport default createResolver((parent, args, { user }) => {\n  if (!user || !user.id) {\n    throw new Error('Not authenticated');\n  }\n});\n\n// export const requiresTeamAccess = createResolver(\n//   async (parent, { channelId }, { user, models },\n//   ) => {\n//     if (!user || !user.id) {\n//       throw new Error('Not authenticated');\n//     }\n//     // check if part of the team\n//     const channel = await models.Channel.findOne({ where: { id: channelId } });\n//     const member = await models.Member.findOne({\n//       where: { teamId: channel.teamId, userId: user.id },\n//     });\n//     if (!member) {\n//       throw new Error(\"You have to be a member of the team to subcribe to it's messages\");\n//     }\n//   },\n// );\n\n// export const directMessageSubscription = createResolver(\n//   async (parent, { teamId, userId }, { user, models },\n//   ) => {\n//     if (!user || !user.id) {\n//       throw new Error('Not authenticated');\n//     }\n\n//     const members = await models.Member.findAll({\n//       where: {\n//         teamId,\n//         [models.sequelize.Op.or]: [{ userId }, { userId: user.id }],\n//       },\n//     });\n\n//     if (members.length !== 2) {\n//       throw new Error('Something went wrong');\n//     }\n//   },\n// );\n","export default (e, models) => {\n  if (e instanceof models.sequelize.ValidationError) {\n    return e.errors.map(error => ({\n      path: error.path,\n      type: error.type,\n      message: error.message,\n    }));\n  }\n  return [{ path: 'name', message: 'something went wrong' }];\n};\n","import Sequelize from 'sequelize';\nimport requiresAuth from '../services/permissions';\nimport formatErrors from '../formatErrors';\nimport { COVER_SIZE } from '../constants';\n\nconst { Op } = Sequelize;\n\nconst AlbumsResolver = {\n  Query: {\n    allAlbums: requiresAuth.createResolver(\n      (parent, { id }, { models, user }) => {\n        const filter = id\n          ? {\n            [Op.and]: {\n              userId: { [Op.eq]: user.id },\n              bin: { [Op.eq]: false },\n              id: { [Op.eq]: id },\n            },\n          }\n          : {\n            [Op.and]: {\n              userId: { [Op.eq]: user.id },\n              bin: { [Op.eq]: false },\n            },\n          };\n        return models.Album.findAll({\n          where: filter,\n          include: [{ model: models.Photo, as: 'photos' }],\n          order: [['name']],\n        })\n          .then(result => ({\n            data: result.map(r => r.dataValues),\n            errors: null,\n          }))\n          .catch(err => ({ data: [], errors: formatErrors(err, models) }));\n      },\n    ),\n\n    // NOTE: Hard-coded user id\n    getPublicAlbums: (parent, args, { models, userId = 1 }) =>\n      models.Album.findAll({\n        where: {\n          [Op.and]: {\n            userId: { [Op.eq]: userId },\n            isPublic: { [Op.eq]: true },\n            bin: { [Op.eq]: false },\n            cover: { [Op.ne]: null },\n          },\n        },\n        include: [{ model: models.Photo, as: 'photos' }],\n        order: [['createdAt', 'DESC']],\n      })\n        .then(result => ({\n          data: result.map(r => r.dataValues),\n          errors: null,\n        }))\n        .catch(err => ({ data: [], errors: formatErrors(err, models) })),\n\n    getAlbum: (parent, { albumId }, { models }) =>\n      models.Album.findOne({\n        where: {\n          [Op.and]: {\n            id: { [Op.eq]: albumId },\n            isPublic: { [Op.eq]: true },\n            bin: { [Op.eq]: false },\n          },\n        },\n        include: [{ model: models.Photo, as: 'photos' }],\n      })\n        .then(result => ({\n          data: result.dataValues,\n          errors: null,\n        }))\n        .catch(err => ({ data: null, errors: formatErrors(err, models) })),\n  },\n\n  Mutation: {\n    addAlbum: requiresAuth.createResolver(\n      async (parent, { album }, { models, user }) => {\n        const { id, ...details } = album;\n        return !!models.Album.create({ ...details, userId: user.id });\n      },\n    ),\n\n    updateAlbum: requiresAuth.createResolver(\n      async (parent, { album }, { models }) => {\n        const { id, ...details } = album;\n        return !!models.Album.update({ ...details }, { where: { id } });\n      },\n    ),\n\n    addPhotosToAlbum: requiresAuth.createResolver(\n      async (parent, { albumId, photoIds }, { models }) => {\n        try {\n          const album = await models.Album.findById(albumId);\n          if (!album) { return false; }\n\n          // Set first photo as default album cover if none set\n          if (!album.dataValues.cover) {\n            const firstPhoto = await models.Photo.findById(photoIds[0]);\n            // Set cover photo id and url\n            const cover = firstPhoto.dataValues.urls[COVER_SIZE];\n            const coverId = firstPhoto.dataValues.id;\n            await models.Album.update({ cover, coverId }, { where: { id: albumId } });\n          }\n\n          // Add photos to the album\n          const result = await album.addPhotos(photoIds);\n          return { data: !!result, errors: null };\n        } catch (err) {\n          return { data: false, errors: formatErrors(err, models) };\n        }\n      },\n    ),\n\n    removePhotosFromAlbum: requiresAuth.createResolver(\n      async (parent, { albumId, photoIds }, { models }) => {\n        try {\n          const album = await models.Album.findById(albumId);\n          if (!album) { return false; }\n          const result = await album.removePhotos(photoIds);\n          return { data: !!result, errors: null };\n        } catch (err) {\n          return { data: false, errors: formatErrors(err, models) };\n        }\n      },\n    ),\n\n    addView: async (parent, { albumId }, { models }) => {\n      const album = await models.Album.findById(albumId);\n      let { views } = album.dataValues;\n      views += 1;\n      return !!album.update({ views });\n    },\n\n    deleteAlbum: requiresAuth.createResolver(\n      async (parent, { albumId }, { models }) =>\n        !!models.Album.destroy({ where: { id: albumId } }),\n    ),\n  },\n};\n\nexport default AlbumsResolver;\n","import { PubSub } from 'apollo-server';\n\nconst pubsub = new PubSub();\nexport default pubsub;\n\nexport const UPLOAD_STARTED = 'UPLOAD_STARTED';\nexport const UPLOAD_PROGRESS = 'UPLOAD_PROGRESS';\n\nexport const emitUploadStarted = filename =>\n  pubsub.publish(UPLOAD_STARTED, {\n    uploadStarted: filename,\n  });\n\nexport const emitUploadProgress = (filename, percentage) =>\n  pubsub.publish(UPLOAD_PROGRESS, {\n    uploadProgress: { filename, percentage },\n  });\n","import path from 'path';\nimport rimraf from 'rimraf';\nimport fs, { createWriteStream } from 'file-system';\nimport progressStream from 'progress-stream';\nimport { UPLOAD_FOLDER } from '../constants';\nimport { ROOT } from './utils';\nimport { emitUploadStarted, emitUploadProgress } from '../pubsub';\n\n// TODO: subscription\n/**\n * This function sets a subscription emitter for upload progress. The progress object exposes\n * properties for transferred (b), remaining (b), length (b) and percentage.\n * @param {*} size in bytes\n * @param {*} filename\n */\nexport const setProgress = (size, filename) =>\n  progressStream(\n    { length: size, time: 10 },\n    progress => console.log(filename, Math.round(progress.percentage))\n    || emitUploadProgress(filename, Math.round(progress.percentage)),\n  );\n\n// TODO: make progress work!\nexport const storeUpload = (stream, filename, progress) =>\n  new Promise((resolve, reject) => {\n    const storePath = path.join(ROOT, UPLOAD_FOLDER, filename);\n    if (progress) {\n      /* stream\n          .pipe(progress)\n          .pipe(createWriteStream(storePath))\n          .on('finish', () => resolve())\n          .on('error', err => reject(err)); */\n    } else {\n      stream\n        .on('error', (error) => {\n          if (stream.truncated) {\n            fs.unlinkSync(storePath);\n          }\n          reject(error);\n        })\n        .pipe(createWriteStream(storePath))\n        .on('finish', () => resolve())\n        .on('error', err => reject(err));\n    }\n  });\n\nconst deleteFile = (filename, folder = '/') => new Promise((resolve) => {\n  const file = path.join(ROOT, folder, filename);\n  rimraf(file, {}, (error) => {\n    if (error) {\n      console.log(`Unable to delete ${filename}`);\n    }\n    resolve();\n  });\n});\n\nexport const deletePhotoFiles = files =>\n  new Promise(async (resolve, reject) => {\n    if (files && files.length) {\n      // Replace any non-null http url with ROOT\n      const deNulledList = files.filter(n => n);\n      try {\n        await Promise.all(deNulledList.map(f => deleteFile(f)));\n        resolve();\n      } catch (err) {\n        reject(err);\n      }\n    }\n  });\n\nconst deleteAllFiles = folder => new Promise((resolve) => {\n  rimraf(path.join(ROOT, folder, '/*'), {}, (error) => {\n    if (error) {\n      console.log(`Unable to clean files folder: ${error}`);\n    }\n    resolve();\n  });\n});\n\nexport const cleanUploads = () => deleteAllFiles(UPLOAD_FOLDER);\n\nexport const cleanUpload = filename => deleteFile(filename, UPLOAD_FOLDER);\n","class TaskQueue {\n  constructor(concurrency = 1) {\n    this.concurrency = concurrency;\n    this.running = 0;\n    this.queue = [];\n  }\n\n  pushTask(task) {\n    this.queue.push(task);\n    this.next();\n  }\n\n  next() {\n    while (this.running < this.concurrency && this.queue.length) {\n      const task = this.queue.shift();\n      // task(() => {\n      task().then(() => {\n        this.running -= 1;\n        this.next();\n      });\n      this.running += 1;\n    }\n  }\n\n  empty() {\n    this.queue = [];\n  }\n}\n\nexport default TaskQueue;\n","import TaskQueue from './TaskQueue';\nimport { BATCH_CONCURRENCY } from '../constants';\n\nconst limitConcurrency = (con) => {\n  if (!con) { return BATCH_CONCURRENCY; }\n  if ((typeof con !== 'number') || con < 1) {\n    return 1;\n  }\n  if (con > BATCH_CONCURRENCY) {\n    return BATCH_CONCURRENCY;\n  }\n  return con;\n};\n\nexport const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nexport default concurrency =>\n  async (records, resolver, params, sizes = []) => {\n    const queue = new TaskQueue(limitConcurrency(concurrency));\n    const batchResults = [];\n    let result;\n\n    await new Promise((resolve, reject) => {\n      if (!records || records.length === 0) { resolve(batchResults); }\n\n      let completed = 0;\n      const increment = () => {\n        completed += 1;\n        if (completed === records.length) { resolve(batchResults); }\n      };\n\n      records.forEach((record, i) => {\n        const task = async () => {\n          try {\n            // Resolver signature is (parent, args, context)\n            const { parent, argName, context } = params;\n            const size = sizes ? sizes[i] : null; // Upload size for photos\n            const args = { [argName]: record, size };\n            result = await resolver(parent, args, context);\n            if (result) { batchResults.push(result); }\n            increment();\n          } catch (err) {\n            increment();\n            queue.empty();\n            // reject here to stop the batch on a general error\n            reject(Error(`Batch upload failed: ${err.message}`));\n          }\n        };\n        queue.pushTask(task);\n      });\n    });\n    return batchResults;\n  };\n","import Sequelize from 'sequelize';\nimport { withFilter } from 'graphql-subscriptions';\nimport {\n  storeUpload, setProgress, cleanUpload, deletePhotoFiles,\n} from '../services/file';\nimport requiresAuth from '../services/permissions';\nimport formatErrors from '../formatErrors';\nimport processFile from '../services/processFile';\nimport batch from '../services/batch';\nimport pubsub, { UPLOAD_STARTED, UPLOAD_PROGRESS } from '../pubsub';\n\nconst { Op } = Sequelize;\n\nconst PhotosResolver = {\n  Subscription: {\n    uploadStarted: {\n      subscribe: () => pubsub.asyncIterator(UPLOAD_STARTED),\n    },\n    uploadProgress: {\n      subscribe: withFilter(\n        () => pubsub.asyncIterator(UPLOAD_PROGRESS),\n        (payload, args) => payload.uploadProgress.filename === args.filename,\n      ),\n      // subscribe: requiresAuth.createResolver(withFilter(\n      //   () => pubsub.asyncIterator(UPLOAD_PROGRESS),\n      //   (payload, args) => payload.uploadProgress.filename === args.filename,\n      // )),\n    },\n  },\n\n  Query: {\n    allPhotos: (parent, { albumId, orderBy }, { models, userId = 1 }) => {\n      const filter = albumId\n        ? {\n          [Op.and]: {\n            userId: { [Op.eq]: userId },\n            bin: { [Op.eq]: false },\n            '$albums.id$': { [Op.eq]: albumId },\n          },\n        }\n        : {\n          [Op.and]: {\n            userId: { [Op.eq]: userId },\n            bin: { [Op.eq]: false },\n          },\n        };\n      const order = orderBy ? orderBy.split('_') : ['id', 'DESC'];\n\n      return models.Photo.findAll({\n        include: [{\n          model: models.Album,\n          attributes: ['id'],\n          through: 'album_photos',\n        }],\n        where: filter,\n        order: [order],\n      })\n        .then(result => ({\n          data: result.map(r => r.dataValues),\n          errors: null,\n        }))\n        .catch(err => ({ data: [], errors: formatErrors(err, models) }));\n    },\n\n    publicPhotos: async (parent, { albumId, orderBy }, { models, userId = 1 }) => {\n      // Determine whether albumId is slug or number\n      let id;\n      if (!isNaN(parseInt(albumId, 10))) {\n        id = parseInt(albumId, 10);\n      } else {\n        // Slug\n        const result = await models.Album.findOne({\n          where: { slug: { [Op.eq]: albumId } },\n        });\n        if (!result) {\n          return {\n            data: [],\n            errors: Error('No album by that name'),\n          };\n        }\n        id = result.dataValues.id;\n      }\n\n      const filter = albumId\n        ? {\n          [Op.and]: {\n            userId: { [Op.eq]: userId },\n            bin: { [Op.eq]: false },\n            isPublic: { [Op.eq]: true },\n            '$albums.id$': { [Op.eq]: id },\n          },\n        }\n        : {\n          [Op.and]: {\n            userId: { [Op.eq]: userId },\n            bin: { [Op.eq]: false },\n          },\n        };\n      const order = orderBy ? orderBy.split('_') : ['id', 'DESC'];\n\n      return models.Photo.findAll({\n        include: [{\n          model: models.Album,\n          attributes: ['id'],\n          through: 'album_photos',\n        }],\n        where: filter,\n        order: [order],\n      })\n        .then(result => ({\n          data: result.map(r => r.dataValues),\n          errors: null,\n        }))\n        .catch(err => ({ data: [], errors: formatErrors(err, models) }));\n    },\n  },\n\n  Mutation: {\n    uploadPhoto: requiresAuth.createResolver(\n      async (parent, { file }, { models, user, totalUploadSize }) => {\n        const { stream, filename, mimetype } = await file;\n\n        // Image files only (jpg)\n        if (mimetype !== 'image/jpeg') {\n          console.error(`User tried to upload a file with mimetype: ${mimetype}`);\n          return { success: false, error: 'You cannot upload this type of file' };\n        }\n\n        try {\n          // const progress = setProgress(size, filename);\n          await storeUpload(stream, filename);\n          // await storeUpload(stream, filename, progress);\n\n          // Process the file\n          const {\n            exif, error, urls, thumbnail, name,\n          } = await processFile(filename);\n\n          console.log('Processed', filename);\n\n          // Write to database\n          const photoData = {\n            ...exif, urls, thumbnail, name, userId: user.id,\n          };\n          await models.Photo.create(photoData);\n\n          await cleanUpload(filename);\n\n          return {\n            name, success: true, exif: JSON.stringify(exif), error, thumbnail,\n          };\n        } catch (err) {\n          console.error(`FAIL: Unable to upload ${filename}`);\n          console.error(err.message);\n          return { success: false, error: formatErrors(err, models) };\n        }\n      },\n    ),\n\n    uploadPhotos: requiresAuth.createResolver(\n      async (parent, { files, sizes = [] }, ctx) => {\n        const totalUploadSize = sizes.reduce((a, b) => a + b, 0);\n        const context = { ...ctx, totalUploadSize };\n\n        return batch()(\n          files,\n          PhotosResolver.Mutation.uploadPhoto,\n          { parent, argName: 'file', context },\n          sizes,\n        );\n      },\n    ),\n\n    updatePhoto: requiresAuth.createResolver(\n      async (parent, { photo }, { models }) => {\n        const { id, ...details } = photo;\n        return !!models.Photo.update(details, { where: { id } });\n      },\n    ),\n\n    deletePhoto: requiresAuth.createResolver(\n      async (parent, { id }, { models }) => {\n        const photo = await models.Photo.findOne({ where: { id } });\n        const files = photo.dataValues.urls;\n        await deletePhotoFiles(files);\n        return !!models.Photo.destroy({ where: { id } });\n      },\n    ),\n  },\n};\n\nexport default PhotosResolver;\n","import getExifData from './exif';\nimport { resizeImage } from './resize';\n\nexport default file => new Promise(async (resolve, reject) => {\n  try {\n    const exif = await getExifData(file);\n    const {\n      thumbnail, urls, error, name,\n    } = await resizeImage(file, exif);\n    resolve({\n      exif, error, urls, thumbnail, name,\n    });\n  } catch (e) {\n    reject(e);\n  }\n});\n","import { tryLogin } from '../services/auth';\nimport requiresAuth from '../services/permissions';\nimport formatErrors from '../formatErrors';\n\nexport default {\n  Mutation: {\n    login: (parent, { username, password }, { models, SECRET, SECRET2 }) =>\n      tryLogin(username, password, models, SECRET, SECRET2),\n\n    addUser: requiresAuth.createResolver((parent, args, { models }) =>\n      models.User.create(args)\n        .then(result => ({ id: result.id, errors: null }))\n        .catch(err => ({ id: null, errors: formatErrors(err, models) }))),\n  },\n};\n","import Sequelize from 'sequelize';\nimport requiresAuth from '../services/permissions';\nimport { deletePhotoFiles } from '../services/file';\nimport formatErrors from '../formatErrors';\nimport { ALBUM, PHOTO } from '../constants';\n\nconst { Op } = Sequelize;\n\nconst BinResolver = {\n  Query: {\n    allBinItems: requiresAuth.createResolver(\n      (parent, args, { models, user }) => {\n        const albums = models.Album.findAll({\n          where: {\n            [Op.and]: {\n              userId: { [Op.eq]: user.id },\n              bin: { [Op.eq]: true },\n            },\n          },\n          include: [{ model: models.Photo, as: 'photos' }],\n        })\n          .then(result => ({\n            albums: result.map(r => r.dataValues),\n            errors: null,\n          }))\n          .catch(err => ({ photos: [], errors: formatErrors(err, models) }));\n\n        const photos = models.Photo.findAll({\n          where: {\n            [Op.and]: {\n              userId: { [Op.eq]: user.id },\n              bin: { [Op.eq]: true },\n            },\n          },\n        })\n          .then(result => ({\n            photos: result.map(r => r.dataValues),\n            errors: null,\n          }))\n          .catch(err => ({ albums: [], errors: formatErrors(err, models) }));\n\n        // NOTE: This does not concatenate errors; last one wins!\n        return Promise.all([albums, photos])\n          .then(result => result.reduce((prev, cur) => ({ ...prev, ...cur }), {}))\n          .catch(err => ({ albums: [], photos: [], errors: formatErrors(err, models) }));\n      },\n    ),\n  },\n\n  Mutation: {\n    addToBin: requiresAuth.createResolver(\n      async (parent, { type, ids, albumId }, { models, user }) => {\n        if (type === ALBUM) {\n          try {\n            const result = await models.Album.update({ bin: true }, {\n              returning: true,\n              where: {\n                [Op.and]: {\n                  userId: { [Op.eq]: user.id },\n                  id: { [Op.in]: ids },\n                },\n              },\n            });\n            return !!result;\n          } catch (err) {\n            return false;\n          }\n        }\n        if (type === PHOTO) {\n          try {\n            const result = await models.Photo.update({ bin: true }, {\n              returning: true,\n              where: {\n                [Op.and]: {\n                  userId: { [Op.eq]: user.id },\n                  id: { [Op.in]: ids },\n                },\n              },\n            });\n            // If any cover ids are in the removed set, set them to null\n            const albums = await models.Album.findAll();\n            albums.forEach((album) => {\n              if (ids.includes(album.dataValues.coverId)) {\n                models.Album.update(\n                  { cover: null, coverId: null },\n                  { where: { id: album.dataValues.id } },\n                );\n              }\n            });\n\n            return !!result;\n          } catch (err) {\n            return false;\n          }\n        }\n        return false;\n      },\n    ),\n\n    restore: requiresAuth.createResolver(\n      async (parent, args, { models, user }) => {\n        try {\n          const restoreAlbums = await models.Album.update({ bin: false }, {\n            returning: true,\n            where: {\n              [Op.and]: {\n                userId: { [Op.eq]: user.id },\n                bin: { [Op.eq]: true },\n              },\n            },\n          });\n          const restorePhotos = await models.Photo.update({ bin: false }, {\n            returning: true,\n            where: {\n              [Op.and]: {\n                userId: { [Op.eq]: user.id },\n                bin: { [Op.eq]: true },\n              },\n            },\n          });\n          return true;\n        } catch (err) {\n          return false;\n        }\n      },\n    ),\n\n    emptyBin: requiresAuth.createResolver(\n      async (parent, args, { models, user }) => {\n        try {\n          await models.Album.destroy({\n            returning: true,\n            where: {\n              [Op.and]: {\n                userId: { [Op.eq]: user.id },\n                bin: { [Op.eq]: true },\n              },\n            },\n          });\n          // Need to remove photo files as well as database entries\n          const results = await models.Photo.findAll({\n            attributes: ['id', 'urls'],\n            where: {\n              [Op.and]: {\n                userId: { [Op.eq]: user.id },\n                bin: { [Op.eq]: true },\n              },\n            },\n          });\n          results.forEach(async (result) => {\n            const { id, urls } = result.dataValues;\n            await deletePhotoFiles(urls);\n            await models.Photo.destroy({ where: { id } });\n          });\n          return true;\n        } catch (err) {\n          return false;\n        }\n      },\n    ),\n  },\n};\n\nexport default BinResolver;\n","import albums from './albums';\nimport photos from './photos';\nimport users from './users';\nimport bin from './bin';\n\nexport default [\n  albums,\n  photos,\n  users,\n  bin,\n];\n","import albums from './albums';\nimport photos from './photos';\nimport users from './users';\nimport bin from './bin';\n\nexport default [\n  albums,\n  photos,\n  users,\n  bin,\n];\n","export default `\n  type Album {\n    id: Int!\n    name: String!\n    slug: String\n    description: String\n    cover: String\n    coverId: Int\n    views: Int!\n    isPublic: Boolean!\n    createdAt: String!\n    photos: [Photo!]\n  }\n\n  input AlbumInput {\n    id: Int\n    name: String\n    slug: String\n    description: String\n    cover: String\n    coverId: Int\n    isPublic: Boolean\n  }\n\n  type AlbumResponse {\n    data: Album\n    errors: [Error!]\n  }\n\n  type AlbumsResponse {\n    data: [Album!]\n    errors: [Error!]\n  }\n\n  type AlbumUpdateResponse {\n    data: Boolean!\n    errors: [Error!]\n  }\n\n  type Query {\n    allAlbums(id: Int): AlbumsResponse!\n    getPublicAlbums: AlbumsResponse!\n    getAlbum(albumId: Int!): AlbumResponse!\n  }\n\n  type Mutation {\n    addAlbum(album: AlbumInput!): Boolean!\n    updateAlbum(album: AlbumInput!): Boolean!\n    addPhotosToAlbum(albumId: Int!, photoIds: [Int!]!): AlbumUpdateResponse!\n    removePhotosFromAlbum(albumId: Int!, photoIds: [Int!]!): AlbumUpdateResponse!\n    addView(albumId: Int!): Boolean!\n    deleteAlbum(albumId: Int!): Boolean!\n  }\n`;\n\n// setCover(albumId: Int!, photoId: Int!): AlbumUpdateResponse!\n","export default `\n  scalar Upload\n\n  enum PhotoOrderByInput {\n    id_ASC\n    id_DESC\n    title_ASC\n    title_DESC\n    dateTaken_ASC\n    dateTaken_DESC\n    createdAt_ASC\n    createdAt_DESC\n  }\n\n  type UploadResponse {\n    name: String!\n    success: Boolean!\n    exif: String\n    error: String\n    thumbnail: String\n  }\n\n  type Photo {\n    id: Int!\n    name: String!\n    urls: [String]!\n    thumbnail: String!\n    title: String\n    caption: String\n    width: Int!\n    height: Int!\n    exposure: Int\n    shutter: Int\n    aperture: Int\n    iso: Int\n    focalLength: Int\n    dateTaken: String\n    isPublic: Boolean!\n    createdAt: String!\n  }\n\n  input PhotoInput {\n    id: Int!\n    name: String\n    title: String\n    caption: String\n    isPublic: Boolean\n  }\n\n  type PhotoResponse {\n    data: [Photo!]\n    errors: [Error!]\n  }\n\n  type Progress {\n    filename: String\n    percentage: Int\n  }\n\n  type Query {\n    allPhotos(albumId: Int, orderBy: PhotoOrderByInput): PhotoResponse!\n    publicPhotos(albumId: String, orderBy: PhotoOrderByInput): PhotoResponse!\n  }\n\n  type Mutation {\n    uploadPhoto(file: Upload!): UploadResponse!\n    uploadPhotos(files: [Upload!]!, sizes: [Int!]): [UploadResponse!]!\n    updatePhoto(photo: PhotoInput!): Boolean!\n    deletePhoto(id: Int!): Boolean!\n  }\n\n  type Subscription {\n    uploadStarted: String\n    uploadProgress(filename: String!): Progress\n  }\n`;\n","export default `\n  type Error {\n    path: String\n    message: String\n    type: String\n  }\n\n  type createRecordResponse {\n    id: Int\n    errors: [Error!]\n  }\n\n  type LoginResponse {\n    success: Boolean!\n    token: String\n    refreshToken: String\n    errors: [Error!]\n  }\n\n  type Mutation {\n    addUser(username: String!, email: String!, password: String!, isAdmin: Boolean): createRecordResponse!\n    login(username: String!, password: String!): LoginResponse!\n  }\n`;\n","export default `\n  type BinResponse {\n    albums: [Album!]\n    photos: [Photo!]\n    errors: [Error!]\n  }\n\n  type Query {\n    allBinItems: BinResponse!\n  }\n\n  type Mutation {\n    addToBin(type: String!, ids: [Int!]!, albumId: Int): Boolean!\n    restore: Boolean!\n    emptyBin: Boolean!\n  }\n`;\n","import dotenv from 'dotenv';\nimport path from 'path';\nimport http from 'http';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport compression from 'compression';\nimport jwt from 'jsonwebtoken';\nimport { ApolloServer, makeExecutableSchema } from 'apollo-server-express';\nimport playground from 'graphql-playground-middleware-express';\nimport { mergeTypes, mergeResolvers } from 'merge-graphql-schemas';\nimport models from './models';\nimport seedUser from './models/seedUser';\nimport { refreshTokens } from './services/auth';\nimport { version } from '../package.json';\nimport { PHOTOS_FOLDER } from './constants';\nimport resolversSet from './resolvers';\nimport schemaSet from './schema';\n\ndotenv.config();\n\n// eslint-disable-next-line prefer-destructuring\nconst SECRET = process.env.SECRET;\nconst SECRET2 = process.env.REFRESH_SECRET;\nconst wsUri = process.env.SERVER_WS || 'ws://localhost';\nconst port = process.env.PORT || 3001;\n\nconst typeDefs = mergeTypes(schemaSet);\nconst resolvers = mergeResolvers(resolversSet);\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers,\n});\n\nconst server = new ApolloServer({\n  schema,\n  // TODO: Get auth context\n  //  subscriptions: {\n  //   onConnect: (connectionParams, webSocket) => {\n  //     if (connectionParams) {\n  //       // return validateToken(connectionParams.authToken)\n  //       //   .then(findUser(connectionParams.authToken))\n  //       //   .then(user => ({\n  //       //     currentUser: user,\n  //       //   }));\n\n  //       // onConnect: async ({ token, refreshToken }, webSocket) => {\n  //       //   if (token && refreshToken) {\n  //       //     try {\n  //       //       const { user } = jwt.verify(token, SECRET);\n  //       //       return { models, user };\n  //       //     } catch (err) {\n  //       //       const newTokens = await refreshTokens(token, refreshToken, models, SECRET, SECRET2);\n  //       //       return { models, user: newTokens.user };\n  //       //     }\n  //       //   }\n\n  //       //   return { models };\n  //       // },\n\n\n  //       return { user: 1 };\n  //     }\n\n  //     throw new Error('Missing auth token!');\n  //   },\n  // },\n  // Need to use connection context for subscriptions\n  context: ({ req, connection }) => {\n    if (connection) {\n      // connection.context.x-token\n      return {};\n    }\n    return {\n      models,\n      user: req.user,\n      SECRET,\n      SECRET2,\n    };\n  },\n});\n\nconst graphqlEndpoint = '/graphql';\nconst subscriptionsEndpoint = `${wsUri}:${port}${server.subscriptionsPath}`;\nconst app = express();\nconst corsOptions = { origin: '*' };\n\nconst addUser = async (req, res, next) => {\n  const token = req.headers['x-token'];\n  if (token) {\n    try {\n      const { user } = jwt.verify(token, SECRET);\n      req.user = user;\n    } catch (err) {\n      const refreshToken = req.headers['x-refresh-token'];\n      const newTokens = await refreshTokens(token, refreshToken, models, SECRET, SECRET2);\n      if (newTokens.token && newTokens.refreshToken) {\n        res.set('Access-Control-Expose-Headers', 'x-token, x-refresh-token');\n        res.set('x-token', newTokens.token);\n        res.set('x-refresh-token', newTokens.refreshToken);\n      }\n      req.user = newTokens.user;\n    }\n  }\n  next();\n};\n\napp.use(addUser);\napp.use(bodyParser.json({ limit: '4mb' }));\napp.use(cors(corsOptions));\napp.use(compression());\napp.use('/playground', playground({\n  endpoint: graphqlEndpoint,\n  subscriptionsEndpoint,\n}));\napp.use('/photos', express.static(path.join(__dirname, '../', PHOTOS_FOLDER)));\n\nserver.applyMiddleware({ app });\n\n// Set up subscriptions\nconst httpServer = http.createServer(app);\nserver.installSubscriptionHandlers(httpServer);\n\nprocess.on('SIGINT', () => {\n  process.exit(0);\n});\n\n// Start the socket and graphQl servers\nhttpServer.listen({ port }, async () => {\n  await models.sequelize.sync();\n  await seedUser();\n  console.info(`🚀 Portfolio API version ${version} ready`);\n  console.info(`🚀 Subscriptions ready at ${subscriptionsEndpoint}`);\n});\n"],"sourceRoot":""}