!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r(require("sequelize"),require("path"),require("dotenv"),require("jsonwebtoken"),require("file-system"),require("bcrypt"),require("express"),require("apollo-server-express"),require("merge-graphql-schemas"),require("rimraf"),require("sharp"),require("body-parser"),require("cors"),require("compression"),require("graphql-playground-middleware-express"),require("graphql-subscriptions"),require("progress-stream"),require("apollo-server"),require("exif"),require("image-size"),require("mkdirp")):"function"==typeof define&&define.amd?define("migration-data-model",["sequelize","path","dotenv","jsonwebtoken","file-system","bcrypt","express","apollo-server-express","merge-graphql-schemas","rimraf","sharp","body-parser","cors","compression","graphql-playground-middleware-express","graphql-subscriptions","progress-stream","apollo-server","exif","image-size","mkdirp"],r):"object"==typeof exports?exports["migration-data-model"]=r(require("sequelize"),require("path"),require("dotenv"),require("jsonwebtoken"),require("file-system"),require("bcrypt"),require("express"),require("apollo-server-express"),require("merge-graphql-schemas"),require("rimraf"),require("sharp"),require("body-parser"),require("cors"),require("compression"),require("graphql-playground-middleware-express"),require("graphql-subscriptions"),require("progress-stream"),require("apollo-server"),require("exif"),require("image-size"),require("mkdirp")):e["migration-data-model"]=r(e.sequelize,e.path,e.dotenv,e.jsonwebtoken,e["file-system"],e.bcrypt,e.express,e["apollo-server-express"],e["merge-graphql-schemas"],e.rimraf,e.sharp,e["body-parser"],e.cors,e.compression,e["graphql-playground-middleware-express"],e["graphql-subscriptions"],e["progress-stream"],e["apollo-server"],e.exif,e["image-size"],e.mkdirp)}(global,function(e,r,n,t,o,a,s,i,u,l,d,c,p,m,h,f,b,g,y,w,I){return function(e){var r={};function n(t){if(r[t])return r[t].exports;var o=r[t]={i:t,l:!1,exports:{}};return e[t].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=r,n.d=function(e,r,t){n.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,r){if(1&r&&(e=n(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var o in e)n.d(t,o,function(r){return e[r]}.bind(null,o));return t},n.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(r,"a",r),r},n.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},n.p="",n(n.s=32)}([function(r,n){r.exports=e},function(e,r,n){"use strict";n.d(r,"j",function(){return t}),n.d(r,"f",function(){return o}),n.d(r,"g",function(){return a}),n.d(r,"a",function(){return s}),n.d(r,"e",function(){return i}),n.d(r,"h",function(){return u}),n.d(r,"c",function(){return l}),n.d(r,"i",function(){return d}),n.d(r,"b",function(){return c}),n.d(r,"d",function(){return p});const t="uploads",o="photos",a=10,s="album",i="photo",u=["original",2560,1440,960,700,360,{longestEdge:150}],l=5,d=6,c=5,p="__"},function(e,n){e.exports=r},function(e,r){e.exports=n},function(e,r){e.exports=t},function(e,r,n){"use strict";(function(e){n.d(r,"a",function(){return o});n(2);var t=n(1);process.env.SERVER_URI,process.env.PORT,t.f;const o="/usr/app/"}).call(this,"src/services")},function(e,r,n){"use strict";var t=n(3),o=n.n(t),a=n(0),s=n.n(a);o.a.config();var i=new s.a(process.env.PGDATABASE,process.env.PGUSER,process.env.PGPASSWORD,{host:process.env.PGHOST,port:process.env.PGPORT,dialect:"postgres",pool:{max:5,min:0,acquire:3e4,idle:1e4},logging:!1}),u=n(8),l=n.n(u),d=n(1);o.a.config();const{Op:c}=s.a,p=i.define("users",{id:{type:s.a.INTEGER,primaryKey:!0,autoIncrement:!0},username:{type:s.a.STRING,unique:!0,allowNull:!1},email:{type:s.a.STRING,unique:!0,allowNull:!1},password:{type:s.a.STRING,allowNull:!1},isAdmin:{type:s.a.BOOLEAN,allowNull:!1,defaultValue:!1},blocked:s.a.BOOLEAN});p.beforeCreate(e=>{e.password=l.a.hashSync(e.password,d.g)});var m=p;var h=i.define("photos",{id:{type:s.a.INTEGER,primaryKey:!0,autoIncrement:!0},name:{type:s.a.STRING,allowNull:!1},urls:{type:s.a.JSON,allowNull:!1},thumbnail:{type:s.a.STRING,allowNull:!1},title:s.a.STRING,caption:s.a.STRING,width:{type:s.a.INTEGER,allowNull:!1},height:{type:s.a.INTEGER,allowNull:!1},exposure:s.a.INTEGER,shutter:s.a.INTEGER,aperture:s.a.INTEGER,iso:s.a.INTEGER,focalLength:s.a.INTEGER,dateTaken:s.a.DATE,isPublic:{type:s.a.BOOLEAN,allowNull:!1,defaultValue:!0},bin:{type:s.a.BOOLEAN,allowNull:!1,defaultValue:!1}},{indexes:[{name:"i_photo_name",unique:!0,fields:["name"]},{name:"i_photo_title",unique:!0,fields:["title"]}]});var f=i.define("albums",{id:{type:s.a.INTEGER,primaryKey:!0,autoIncrement:!0},name:{type:s.a.STRING,allowNull:!1},slug:s.a.STRING,description:s.a.TEXT,cover:s.a.STRING,coverId:s.a.INTEGER,isPublic:{type:s.a.BOOLEAN,allowNull:!1,defaultValue:!0},views:{type:s.a.INTEGER,allowNull:!1,defaultValue:0},bin:{type:s.a.BOOLEAN,allowNull:!1,defaultValue:!1}},{indexes:[{name:"i_album_name",unique:!0,fields:["name"]}]});h.belongsTo(m),f.belongsTo(m),h.belongsToMany(f,{through:"album_photos"}),f.belongsToMany(h,{through:"album_photos",onDelete:"CASCADE"});r.a={User:m,findByLogin:async e=>{let r=await p.findOne({where:{username:e}});return r||(r=await p.findOne({where:{email:e}})),r},Photo:h,Album:f,sequelize:i}},function(e,r){e.exports=o},function(e,r){e.exports=a},function(e,r,n){"use strict";n.d(r,"a",function(){return u}),n.d(r,"b",function(){return l});var t=n(4),o=n.n(t),a=n(8),s=n.n(a);const i=async(e,r,n)=>{const{id:t,username:a,isAdmin:s,...i}=e;return[o.a.sign({user:{id:t,username:a,isAdmin:s}},r,{expiresIn:"1d"}),o.a.sign({user:{id:t}},n,{expiresIn:"1w"})]},u=async(e,r,n,t,a)=>{let s=0;try{const{user:{id:e}}=o.a.decode(r);s=e}catch(e){return{}}if(!s)return{};const u=await n.User.findOne({where:{id:s},raw:!0});if(!u)return{};const l=u.password+a;try{o.a.verify(r,l)}catch(e){return console.log("Unable to verify refreshToken"),{}}const[d,c]=await i(u,t,l);return{token:d,refreshToken:c,user:u}},l=async(e,r,n,t,o)=>{const a=await n.findByLogin(e);if(!a)return{success:!1,errors:[{path:"login",message:"Wrong login details"}]};if(!await s.a.compare(r,a.password))return{success:!1,errors:[{path:"login",message:"Wrong login details"}]};const u=a.password+o,[l,d]=await i(a,t,u);return{success:!0,token:l,refreshToken:d}}},function(e,r){e.exports=s},function(e,r){e.exports=i},function(e,r){e.exports=u},function(e,r){e.exports=l},function(e,r){e.exports=d},function(e,r){e.exports=require("http")},function(e,r){e.exports=c},function(e,r){e.exports=p},function(e,r){e.exports=m},function(e,r){e.exports=h},function(e,r,n){"use strict";var t=n(6);const{User:o}=t.a;r.a=(async()=>{const e=process.env.USERNAME||"test",r=process.env.EMAIL||"test@test.com",n=process.env.PASSWORD||"password";await o.findOne({where:{email:r}})||await o.create({username:e,email:r,password:n,isAdmin:!0})})},function(e){e.exports={a:"1.1.0"}},function(e,r){e.exports=f},function(e,r){e.exports=b},function(e,r){e.exports=g},function(e,r,n){"use strict";(function(e){var t=n(2),o=n.n(t),a=n(26),s=n(27),i=n.n(s);const u=e=>e?{title:null,caption:e.image&&e.image.ImageDescription,exposure:e.exif&&e.exif.ExposureTime,shutter:e.exif&&e.exif.ShutterSpeedValue,aperture:e.exif&&e.exif.FNumber,iso:e.exif&&e.exif.ISO,focalLength:e.exif&&e.exif.FocalLength,dateTaken:e.exif&&(e=>{if(!e)return null;const r=e.split(" "),n=[r[0].replace(/:/gm,"-"),r[1]].join("T");return new Date(n)})(e.exif.CreateDate)}:{};r.a=(r=>new Promise(n=>{const t=o.a.join(e,"../../uploads",r);new a.ExifImage({image:t},(e,r)=>{n({...u(r),...i()(t)})})}))}).call(this,"src/services")},function(e,r){e.exports=y},function(e,r){e.exports=w},function(e,r,n){"use strict";(function(e){n.d(r,"a",function(){return y});var t=n(2),o=n.n(t),a=n(7),s=n.n(a),i=n(3),u=n.n(i),l=n(29),d=n.n(l),c=n(14),p=n.n(c),m=n(1),h=n(5);u.a.config();const f=o.a.join(h.a,m.f),b=(e,r=0)=>{if(!(e=>s.a.existsSync(e))(e))return e;const n=o.a.dirname(e),t=o.a.basename(e),a=o.a.extname(t),i=t.split(".")[0].split(`${m.d}${r}`)[0];return b(o.a.join(n,`${i}${m.d}${r+1}${a}`),r+1)},g=(r,n)=>t=>new Promise((a,s)=>{if(((e,r)=>{if("original"===r)return!1;return e<(r.width?r.width:r)})(n.width,t))a(null);else{t.longestEdge&&(t=(({width:e,height:r},n)=>e>=r?{width:n,height:null}:{width:null,height:n})(n,t.longestEdge));const i=o.a.join(e,`../../${m.j}`,r),u=o.a.extname(r),l=(e=>{const r=new Date,n=r.getFullYear().toString(),t=(r.getMonth()+1).toString(),a=r.getDate().toString(),s=o.a.join(f,n,t,a,(e=>e.replace(/[^a-z0-9._-]/gi,"").toLowerCase())(e||""));return b(s)})(`${r.split(u)[0]}${(e=>e&&"original"!==e?e.height?`-${e.height}h`:e.width?`-${e.width}w`:`-${e}w`:"")(t)}${u}`);try{((e,r)=>{d()(o.a.dirname(e),e=>e?r(e):r())})(l,async()=>{const e=o.a.join(l);"number"==typeof t?await p()(i).resize(t).toFormat("jpeg").toFile(e):await p()(i).resize(t.width,t.height).toFormat("jpeg").toFile(e),a((e=>`/${e.replace(h.a,"")}`)(e))})}catch(e){console.log("resize error:",e.message),s(e)}}}),y=async(e,r)=>{try{const n=o.a.basename(e),t=await Promise.all(m.h.map(g(e,r)));return{name:n,urls:t,thumbnail:t[m.i],error:null}}catch(e){return{url:null,error:e}}}}).call(this,"src/services")},function(e,r){e.exports=I},function(e,r,n){"use strict";var t=n(0),o=n.n(t);const a=e=>{const r=e;return r.createResolver=(r=>{return a(async(n,t,o,a)=>(await e(n,t,o,a),r(n,t,o,a)))}),r};var s=a((e,r,{user:n})=>{if(!n||!n.id)throw new Error("Not authenticated")}),i=(e,r)=>e instanceof r.sequelize.ValidationError?e.errors.map(e=>({path:e.path,type:e.type,message:e.message})):[{path:"name",message:"something went wrong"}],u=n(1);const{Op:l}=o.a;var d={Query:{allAlbums:s.createResolver((e,{id:r},{models:n,user:t})=>{const o=r?{[l.and]:{userId:{[l.eq]:t.id},bin:{[l.eq]:!1},id:{[l.eq]:r}}}:{[l.and]:{userId:{[l.eq]:t.id},bin:{[l.eq]:!1}}};return n.Album.findAll({where:o,include:[{model:n.Photo,as:"photos"}],order:[["name"]]}).then(e=>({data:e.map(e=>e.dataValues),errors:null})).catch(e=>({data:[],errors:i(e,n)}))}),getPublicAlbums:(e,r,{models:n,userId:t=1})=>n.Album.findAll({where:{[l.and]:{userId:{[l.eq]:t},isPublic:{[l.eq]:!0},bin:{[l.eq]:!1},cover:{[l.ne]:null}}},include:[{model:n.Photo,as:"photos"}],order:[["createdAt","DESC"]]}).then(e=>({data:e.map(e=>e.dataValues),errors:null})).catch(e=>({data:[],errors:i(e,n)})),getAlbum:(e,{albumId:r},{models:n})=>n.Album.findOne({where:{[l.and]:{id:{[l.eq]:r},isPublic:{[l.eq]:!0},bin:{[l.eq]:!1}}},include:[{model:n.Photo,as:"photos"}]}).then(e=>({data:e.dataValues,errors:null})).catch(e=>({data:null,errors:i(e,n)}))},Mutation:{addAlbum:s.createResolver(async(e,{album:r},{models:n,user:t})=>{const{id:o,...a}=r;return!!n.Album.create({...a,userId:t.id})}),updateAlbum:s.createResolver(async(e,{album:r},{models:n})=>{const{id:t,...o}=r;return!!n.Album.update({...o},{where:{id:t}})}),addPhotosToAlbum:s.createResolver(async(e,{albumId:r,photoIds:n},{models:t})=>{try{const e=await t.Album.findById(r);if(!e)return!1;if(!e.dataValues.cover){const e=await t.Photo.findById(n[0]),o=e.dataValues.urls[u.c],a=e.dataValues.id;await t.Album.update({cover:o,coverId:a},{where:{id:r}})}return{data:!!await e.addPhotos(n),errors:null}}catch(e){return{data:!1,errors:i(e,t)}}}),removePhotosFromAlbum:s.createResolver(async(e,{albumId:r,photoIds:n},{models:t})=>{try{const e=await t.Album.findById(r);return!!e&&{data:!!await e.removePhotos(n),errors:null}}catch(e){return{data:!1,errors:i(e,t)}}}),addView:async(e,{albumId:r},{models:n})=>{const t=await n.Album.findById(r);let{views:o}=t.dataValues;return o+=1,!!t.update({views:o})},deleteAlbum:s.createResolver(async(e,{albumId:r},{models:n})=>!!n.Album.destroy({where:{id:r}}))}},c=n(22),p=n(2),m=n.n(p),h=n(13),f=n.n(h),b=n(7),g=n.n(b),y=(n(23),n(5));const w=new(n(24).PubSub);var I=w;const q=(e,r="/")=>new Promise(n=>{const t=m.a.join(y.a,r,e);f()(t,{},r=>{r&&console.log(`Unable to delete ${e}`),n()})}),S=e=>new Promise(async(r,n)=>{if(e&&e.length){const t=e.filter(e=>e);try{await Promise.all(t.map(e=>q(e))),r()}catch(e){n(e)}}});var v=n(25),A=n(28);var P=class{constructor(e=1){this.concurrency=e,this.running=0,this.queue=[]}pushTask(e){this.queue.push(e),this.next()}next(){for(;this.running<this.concurrency&&this.queue.length;)this.queue.shift()().then(()=>{this.running-=1,this.next()}),this.running+=1}empty(){this.queue=[]}};var x=e=>async(r,n,t,o=[])=>{const a=new P((e=>e?"number"!=typeof e||e<1?1:e>u.b?u.b:e:u.b)(e)),s=[];let i;return await new Promise((e,u)=>{r&&0!==r.length||e(s);let l=0;const d=()=>{(l+=1)===r.length&&e(s)};r.forEach((e,r)=>{a.pushTask(async()=>{try{const{parent:l,argName:c,context:p}=t,m=o?o[r]:null,h={[c]:e,size:m};(i=await n(l,h,p))&&s.push(i),d()}catch(e){d(),a.empty(),u(Error(`Batch upload failed: ${e.message}`))}})})}),s};const{Op:E}=o.a,R={Subscription:{uploadStarted:{subscribe:()=>I.asyncIterator("UPLOAD_STARTED")},uploadProgress:{subscribe:Object(c.withFilter)(()=>I.asyncIterator("UPLOAD_PROGRESS"),(e,r)=>e.uploadProgress.filename===r.filename)}},Query:{allPhotos:(e,{albumId:r,orderBy:n},{models:t,userId:o=1})=>{const a=r?{[E.and]:{userId:{[E.eq]:o},bin:{[E.eq]:!1},"$albums.id$":{[E.eq]:r}}}:{[E.and]:{userId:{[E.eq]:o},bin:{[E.eq]:!1}}},s=n?n.split("_"):["id","DESC"];return t.Photo.findAll({include:[{model:t.Album,attributes:["id"],through:"album_photos"}],where:a,order:[s]}).then(e=>({data:e.map(e=>e.dataValues),errors:null})).catch(e=>({data:[],errors:i(e,t)}))},publicPhotos:async(e,{albumId:r,orderBy:n},{models:t,userId:o=1})=>{let a;if(isNaN(parseInt(r,10))){const e=await t.Album.findOne({where:{slug:{[E.eq]:r}}});if(!e)return{data:[],errors:Error("No album by that name")};a=e.dataValues.id}else a=parseInt(r,10);const s=r?{[E.and]:{userId:{[E.eq]:o},bin:{[E.eq]:!1},isPublic:{[E.eq]:!0},"$albums.id$":{[E.eq]:a}}}:{[E.and]:{userId:{[E.eq]:o},bin:{[E.eq]:!1}}},u=n?n.split("_"):["id","DESC"];return t.Photo.findAll({include:[{model:t.Album,attributes:["id"],through:"album_photos"}],where:s,order:[u]}).then(e=>({data:e.map(e=>e.dataValues),errors:null})).catch(e=>({data:[],errors:i(e,t)}))}},Mutation:{uploadPhoto:s.createResolver(async(e,{file:r},{models:n,user:t,totalUploadSize:o})=>{const{stream:a,filename:s,mimetype:l}=await r;if("image/jpeg"!==l)return console.error(`User tried to upload a file with mimetype: ${l}`),{success:!1,error:"You cannot upload this type of file"};try{await((e,r,n)=>new Promise((t,o)=>{const a=m.a.join(y.a,u.j,r);n||e.on("error",r=>{e.truncated&&g.a.unlinkSync(a),o(r)}).pipe(Object(b.createWriteStream)(a)).on("finish",()=>t()).on("error",e=>o(e))}))(a,s);const{exif:e,error:r,urls:o,thumbnail:l,name:d}=await(e=>new Promise(async(r,n)=>{try{const t=await Object(v.a)(e),{thumbnail:o,urls:a,error:s,name:i}=await Object(A.a)(e,t);r({exif:t,error:s,urls:a,thumbnail:o,name:i})}catch(e){n(e)}}))(s),c={...e,urls:o,thumbnail:l,name:d,userId:t.id};return await n.Photo.create(c),await(e=>q(e,u.j))(s),{name:d,success:!0,exif:JSON.stringify(e),error:r,thumbnail:l}}catch(e){return console.error(`FAIL: Unable to upload ${s}`),console.error(e.message),{success:!1,error:i(e,n)}}}),uploadPhotos:s.createResolver(async(e,{files:r,sizes:n=[]},t)=>{const o=n.reduce((e,r)=>e+r,0),a={...t,totalUploadSize:o};return x()(r,R.Mutation.uploadPhoto,{parent:e,argName:"file",context:a},n)}),updatePhoto:s.createResolver(async(e,{photo:r},{models:n})=>{const{id:t,...o}=r;return!!n.Photo.update(o,{where:{id:t}})}),deletePhoto:s.createResolver(async(e,{id:r},{models:n})=>{const t=(await n.Photo.findOne({where:{id:r}})).dataValues.urls;return await S(t),!!n.Photo.destroy({where:{id:r}})})}};var T=R,O=n(9),N={Mutation:{login:(e,{username:r,password:n},{models:t,SECRET:o,SECRET2:a})=>Object(O.b)(r,n,t,o,a),addUser:s.createResolver((e,r,{models:n})=>n.User.create(r).then(e=>({id:e.id,errors:null})).catch(e=>({id:null,errors:i(e,n)})))}};const{Op:B}=o.a;var j={Query:{allBinItems:s.createResolver((e,r,{models:n,user:t})=>{const o=n.Album.findAll({where:{[B.and]:{userId:{[B.eq]:t.id},bin:{[B.eq]:!0}}},include:[{model:n.Photo,as:"photos"}]}).then(e=>({albums:e.map(e=>e.dataValues),errors:null})).catch(e=>({photos:[],errors:i(e,n)})),a=n.Photo.findAll({where:{[B.and]:{userId:{[B.eq]:t.id},bin:{[B.eq]:!0}}}}).then(e=>({photos:e.map(e=>e.dataValues),errors:null})).catch(e=>({albums:[],errors:i(e,n)}));return Promise.all([o,a]).then(e=>e.reduce((e,r)=>({...e,...r}),{})).catch(e=>({albums:[],photos:[],errors:i(e,n)}))})},Mutation:{addToBin:s.createResolver(async(e,{type:r,ids:n,albumId:t},{models:o,user:a})=>{if(r===u.a)try{return!!await o.Album.update({bin:!0},{returning:!0,where:{[B.and]:{userId:{[B.eq]:a.id},id:{[B.in]:n}}}})}catch(e){return!1}if(r===u.e)try{const e=await o.Photo.update({bin:!0},{returning:!0,where:{[B.and]:{userId:{[B.eq]:a.id},id:{[B.in]:n}}}});return(await o.Album.findAll()).forEach(e=>{n.includes(e.dataValues.coverId)&&o.Album.update({cover:null,coverId:null},{where:{id:e.dataValues.id}})}),!!e}catch(e){return!1}return!1}),restore:s.createResolver(async(e,r,{models:n,user:t})=>{try{await n.Album.update({bin:!1},{returning:!0,where:{[B.and]:{userId:{[B.eq]:t.id},bin:{[B.eq]:!0}}}}),await n.Photo.update({bin:!1},{returning:!0,where:{[B.and]:{userId:{[B.eq]:t.id},bin:{[B.eq]:!0}}}});return!0}catch(e){return!1}}),emptyBin:s.createResolver(async(e,r,{models:n,user:t})=>{try{return await n.Album.destroy({returning:!0,where:{[B.and]:{userId:{[B.eq]:t.id},bin:{[B.eq]:!0}}}}),(await n.Photo.findAll({attributes:["id","urls"],where:{[B.and]:{userId:{[B.eq]:t.id},bin:{[B.eq]:!0}}}})).forEach(async e=>{const{id:r,urls:t}=e.dataValues;await S(t),await n.Photo.destroy({where:{id:r}})}),!0}catch(e){return!1}})}};r.a=[d,T,N,j]},function(e,r,n){"use strict";r.a=["\n  type Album {\n    id: Int!\n    name: String!\n    slug: String\n    description: String\n    cover: String\n    coverId: Int\n    views: Int!\n    isPublic: Boolean!\n    createdAt: String!\n    photos: [Photo!]\n  }\n\n  input AlbumInput {\n    id: Int\n    name: String\n    slug: String\n    description: String\n    cover: String\n    coverId: Int\n    isPublic: Boolean\n  }\n\n  type AlbumResponse {\n    data: Album\n    errors: [Error!]\n  }\n\n  type AlbumsResponse {\n    data: [Album!]\n    errors: [Error!]\n  }\n\n  type AlbumUpdateResponse {\n    data: Boolean!\n    errors: [Error!]\n  }\n\n  type Query {\n    allAlbums(id: Int): AlbumsResponse!\n    getPublicAlbums: AlbumsResponse!\n    getAlbum(albumId: Int!): AlbumResponse!\n  }\n\n  type Mutation {\n    addAlbum(album: AlbumInput!): Boolean!\n    updateAlbum(album: AlbumInput!): Boolean!\n    addPhotosToAlbum(albumId: Int!, photoIds: [Int!]!): AlbumUpdateResponse!\n    removePhotosFromAlbum(albumId: Int!, photoIds: [Int!]!): AlbumUpdateResponse!\n    addView(albumId: Int!): Boolean!\n    deleteAlbum(albumId: Int!): Boolean!\n  }\n","\n  scalar Upload\n\n  enum PhotoOrderByInput {\n    id_ASC\n    id_DESC\n    title_ASC\n    title_DESC\n    dateTaken_ASC\n    dateTaken_DESC\n    createdAt_ASC\n    createdAt_DESC\n  }\n\n  type UploadResponse {\n    name: String!\n    success: Boolean!\n    exif: String\n    error: String\n    thumbnail: String\n  }\n\n  type Photo {\n    id: Int!\n    name: String!\n    urls: [String]!\n    thumbnail: String!\n    title: String\n    caption: String\n    width: Int!\n    height: Int!\n    exposure: Int\n    shutter: Int\n    aperture: Int\n    iso: Int\n    focalLength: Int\n    dateTaken: String\n    isPublic: Boolean!\n    createdAt: String!\n  }\n\n  input PhotoInput {\n    id: Int!\n    name: String\n    title: String\n    caption: String\n    isPublic: Boolean\n  }\n\n  type PhotoResponse {\n    data: [Photo!]\n    errors: [Error!]\n  }\n\n  type Progress {\n    filename: String\n    percentage: Int\n  }\n\n  type Query {\n    allPhotos(albumId: Int, orderBy: PhotoOrderByInput): PhotoResponse!\n    publicPhotos(albumId: String, orderBy: PhotoOrderByInput): PhotoResponse!\n  }\n\n  type Mutation {\n    uploadPhoto(file: Upload!): UploadResponse!\n    uploadPhotos(files: [Upload!]!, sizes: [Int!]): [UploadResponse!]!\n    updatePhoto(photo: PhotoInput!): Boolean!\n    deletePhoto(id: Int!): Boolean!\n  }\n\n  type Subscription {\n    uploadStarted: String\n    uploadProgress(filename: String!): Progress\n  }\n","\n  type Error {\n    path: String\n    message: String\n    type: String\n  }\n\n  type createRecordResponse {\n    id: Int\n    errors: [Error!]\n  }\n\n  type LoginResponse {\n    success: Boolean!\n    token: String\n    refreshToken: String\n    errors: [Error!]\n  }\n\n  type Mutation {\n    addUser(username: String!, email: String!, password: String!, isAdmin: Boolean): createRecordResponse!\n    login(username: String!, password: String!): LoginResponse!\n  }\n","\n  type BinResponse {\n    albums: [Album!]\n    photos: [Photo!]\n    errors: [Error!]\n  }\n\n  type Query {\n    allBinItems: BinResponse!\n  }\n\n  type Mutation {\n    addToBin(type: String!, ids: [Int!]!, albumId: Int): Boolean!\n    restore: Boolean!\n    emptyBin: Boolean!\n  }\n"]},function(e,r,n){"use strict";n.r(r),function(e){var r=n(3),t=n.n(r),o=n(2),a=n.n(o),s=n(15),i=n.n(s),u=n(10),l=n.n(u),d=n(16),c=n.n(d),p=n(17),m=n.n(p),h=n(18),f=n.n(h),b=n(4),g=n.n(b),y=n(11),w=n(19),I=n.n(w),q=n(12),S=n(6),v=n(20),A=n(9),P=n(21),x=n(1),E=n(30),R=n(31);t.a.config();const T=process.env.SECRET,O=process.env.REFRESH_SECRET,N=process.env.SERVER_WS||"ws://localhost",B=process.env.PORT||3001,j=Object(q.mergeTypes)(R.a),k=Object(q.mergeResolvers)(E.a),_=Object(y.makeExecutableSchema)({typeDefs:j,resolvers:k}),G=new y.ApolloServer({schema:_,context:({req:e,connection:r})=>r?{}:{models:S.a,user:e.user,SECRET:T,SECRET2:O}}),V=`${N}:${B}${G.subscriptionsPath}`,$=l()();$.use(async(e,r,n)=>{const t=e.headers["x-token"];if(t)try{const{user:n}=g.a.verify(t,T);e.user=n}catch(n){const o=e.headers["x-refresh-token"],a=await Object(A.a)(t,o,S.a,T,O);a.token&&a.refreshToken&&(r.set("Access-Control-Expose-Headers","x-token, x-refresh-token"),r.set("x-token",a.token),r.set("x-refresh-token",a.refreshToken)),e.user=a.user}n()}),$.use(c.a.json({limit:"4mb"})),$.use(m()({origin:"*"})),$.use(f()()),$.use("/playground",I()({endpoint:"/graphql",subscriptionsEndpoint:V})),$.use("/photos",l.a.static(a.a.join(e,"../",x.f))),G.applyMiddleware({app:$});const U=i.a.createServer($);G.installSubscriptionHandlers(U),process.on("SIGINT",()=>{process.exit(0)}),U.listen({port:B},async()=>{await S.a.sequelize.sync(),await Object(v.a)(),console.info(`🚀 Portfolio API version ${P.a} ready`),console.info(`🚀 Subscriptions ready at ${V}`)})}.call(this,"src")}])});
//# sourceMappingURL=index.js.map